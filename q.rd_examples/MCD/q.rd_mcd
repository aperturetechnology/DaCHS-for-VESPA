<resource schema="mcd">
	
	<!--
		Information describing the schema (which represents the database)
											-->

	<meta name="title">MCD - LMD</meta>
	
	<meta name="creationDate">2018-05-27T16:28:28Z</meta>
	<meta name="description" format="raw">
		<![CDATA[
			DESCRIPTION
		]]>
	</meta>
	<meta name="copyright">LMD/IPSL</meta>
	<meta name="creator.name">Zi Yin; Alexandre Rostaing</meta>
	<meta name="publisher">Laboratoire Méteorologie Dynamique</meta>
	<meta name="contact.name">Ehouarn Millour</meta>
	<meta name="contact.email">ehouarn.millour@lmd.jussieu.fr</meta>
	<meta name="contact.address">LMD/IPSL, Sorbonne Université, BP 99, 4 Place Jussieu, 75005 Paris, France</meta>
	<meta name="contact.telephone">+(33) 1 44 27 52 86</meta>
	<meta name="contributor.name">E. Millour</meta>
	<meta name="referenceURL">http://www-mars.lmd.jussieu.fr/</meta>
	<meta name="facility">MCD, avec soutien du CNES et de l'ESA</meta>
	<meta name="instrument"></meta>
	<meta name="subject">MCD</meta>
	<meta name="subject">Mars</meta>
	<meta name="subject">Atmospheric profiles</meta>
	<meta name="subject">Temperature</meta>
        <meta name="subject">CO2 concentration</meta>
        <meta name="subject">Ozone concentration</meta>
        <meta name="subject">Aerosol extinction</meta>
	<meta name="type">Catalog</meta>
	<meta name="contentLevel">General</meta>
	<meta name="contentLevel">University</meta>
	<meta name="contentLevel">Research</meta>
	<meta name="utype">ivo://vopdc.obspm/std/EpnCore#schema-2.0</meta>

	

	<!--
		Table Creation (for EPN-TAP there should only be one table per schema and it has to be called epn_core)
																-->

	<table id="epn_core" onDisk="True" adql="True" primary="granule_uid">

		<!--    Additionnal information on the table    -->
                <meta name="info" infoName="SERVICE_PROTOCOL" infoValue="2.0"> EPN-TAP </meta>
                <meta name="description">
			DESCRIPTION
		</meta>
                <property key="supportsModel">EpnCore#schema-2.0</property>
                <property key="supportsModelURI">ivo://vopdc.obspm/std/EpnCore#schema-2.0</property>
                <publish sets="ivo_managed"/>
                <stc>
                        Polygon ICRS [s_region]
                </stc>

        	<!--	This mixin predefines the columns required by EPN-TAP (with the optional ones)	-->
		<mixin
			spatial_frame_type="body"
			optional_columns="access_url access_format access_estsize time_scale"
			>//epntap2#table-2_0</mixin>
		
		<!--	Define the additionnal columns needed in your table	-->
		<column name="spatial_coordinate_description" type="text" ucd="meta.code.class;pos.frame" description="Describes the type of spatial coordinates" />
	        <column name="solar_longitude_min" type="double precision" unit="deg" ucd="pos.posAng;pos.heliocentric;stat.min"  description="Sub-dataset minimum solar longitude" />
        	<column name="solar_longitude_max" type="double precision" unit="deg" ucd="pos.posAng;pos.heliocentric;stat.max"  description="Sub-dataset maximum solar longitude" />
	        <column name="local_time_min" type="double precision" unit="h" ucd="time.phase;stat.min"  description="Sub-dataset minimum local time (Mars)" />
        	<column name="local_time_max" type="double precision" unit="h" ucd="time.phase;stat.max"  description="Sub-dataset maximum local time (Mars)" />
		<column name="time_scale" type="text" ucd="time.scale"  verbLevel="1" description="time scale" />
		
	</table>



	<!--
		Define the rows of data to add to the table
								-->

	<data id="import">
		
		<!--	Define where to retrieve the data	-->
		<sources>
			<!-- Pattern is used when there are multiple source files (here all the .csv files)	-->
			<pattern>csv/*.csv</pattern>
		</sources>
		
		<!--	Grammars are used to read and retrieve data (here rows in csv files). The rows are saved in local variables	-->
		<csvGrammar>
			<rowfilter procDef="//products#define">
				<bind key="table">"\schema.epn_core"</bind>
				<!--	Python code can be used in rowfilter to modify/format the data (modifications are done as the rows are read)	-->
				<code>
					@granule_uid = @ID+"_SL"+@SL+"_H"+@localtime+"_LAT"+@latitude+"_LON"+@longitude
					@granule_gid = @ID
					@obs_id = @ID

					<!-- Note: Some special characters are used by DaCHS (e.g. @ followed by a name defines a variable in DaCHS), so they are not interpreted as string but as symbols in python (the ASCII code can be used instead, here for &)	-->
					@access_url = "http://sery.lmd.jussieu.fr:8080/cgi-bin/mcdcgi.py?dust="+@scen+chr(38)+"ls="+@SL+chr(38)+"loct="+@localtime+chr(38)+"lat="+@latitude+chr(38)+"lon="+@longitude

					<!-- After formating or modifying the data, each row must be yielded (automatically done for the default row if no formating/modifications are done)	-->
					yield row
				</code>
			</rowfilter>
		</csvGrammar>
		

		<!--	Add the rows of data to the table (should always be epn_core)	-->
		<make table="epn_core">
			
			<!-- Inserts the data of each row made by the grammar in its column	-->
			<rowmaker idmaps="*">

				<!--	Insert fixed data	-->
				<var key="spatial_frame_type">"body"</var>
				<var key="target_name">"Mars"</var>
                                <var key="spatial_coordinate_description">"Mars_IAU2000"</var>
                                <var key="access_format">"application/x-votable+xml"</var>
                                <var key="access_estsize">5</var>
                                <var key="target_class">"planet"</var>
                                <var key="dataproduct_type">"pr"</var>
                                <var key="target_region">"atmosphere"</var>
                                <var key="time_scale">"UTC"</var>
                                <var key="service_title">"SPICAM"</var>
                                <var key="creation_date">"2018-04-17"</var>
				<var key="c3min">0.0</var>
				<var key="c3max">259.5</var>
				
				<!--	Associates the EPN-TAP values to the grammar values (key and source respectively)	--> 
				<var key="c1min" source="longitude" />
				<var key="c1max" source="longitude" />
				<var key="c2min" source="latitude" />
				<var key="c2max" source="latitude" />
				<var key="time_min" source="JD" />  
				<var key="time_max" source="JD" />    
				<var key="solar_longitude_min" source="SL" />
				<var key="solar_longitude_max" source="SL" />
				<var key="local_time_min" source="localtime" />
				<var key="local_time_max" source="localtime" />
			<!--	<var key="measurement_type" source="datatype" />-->
				
				<!-- Bind the columns required by EPN-TAP	-->
				<apply procDef="//epntap2#populate-2_0" name="fillepn">
					<bind key="granule_uid">@granule_uid</bind>
					<bind key="granule_gid">@granule_gid</bind>
					<bind key="obs_id">@obs_id</bind>
					
					<bind key="target_class">@target_class</bind>
					
					<bind key="c1min">@c1min</bind>
					<bind key="c1max">@c1max</bind>
					<bind key="c2min">@c2min</bind>
					<bind key="c2max">@c2max</bind>
					<bind key="c3min">@c3min</bind>
					<bind key="c3max">@c3max</bind>
					
					<bind key="processing_level">"5"</bind>
					
					<bind key="dataproduct_type">@dataproduct_type</bind>
					<bind key="measurement_type">@measurement_type</bind>
					
					<bind key="service_title">@service_title</bind> 
					<bind key="creation_date">@creation_date</bind>
					
					<bind key="time_min">@time_min</bind>
					<bind key="time_max">@time_max</bind>
					<bind key="target_name">"Mars"</bind>
					<bind key="instrument_host_name">@instrument_host_name</bind>
					<bind key="instrument_name">@instrument_name</bind>
					<bind key="target_name">@target_name</bind> 
					<bind key="target_region">@target_region</bind>
					<bind key="time_scale">@time_scale</bind>
				</apply>
			</rowmaker>
		</make>
	</data>
	
	<data id="collection" auto="false">
		<register services="__system__/tap#run"/>
		<make table="epn_core"/>
		<publish/>
	</data>

</resource>


